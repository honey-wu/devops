- hosts: mysql
  remote_user: root
  become: yes
  vars:
    mysql_binary_install_dir: "/usr/local"
    mysql_data_dir: "/data/mysql"
    tar_directory_name: "mysql-5.7.34-el7-x86_64"
    mysql_port: "3306"
    mysql_new_root_password: "123456"
    innodb_buffer_pool_size: "2G"
    mysql_socket_path: "/tmp/mysql.sock"
    mysql_new_adminroot_username: "adminroot"
    mysql_new_adminroot_password: "123456"
    mysql_new_adminroot_host: "%"
    mysql_new_adminroot_priv: "*.*:ALL"
    mysql_replication_username: "repl"
    mysql_replication_password: "123456"
    mysql_replication_priv: "*.*:replication slave"

  tasks:
    - name: Make sure the MySQL service is running
      service:
        name: mysql
        state: started
 
    - name: Set up the MySQL master server
      set_fact:
        mysql_master_ip: "{{ ansible_ssh_host }}"
      when: identity == 'master' and inventory_hostname in groups[group_names.0]

    - name: Set up the MySQL server
      set_fact:
        mysql_slave_ips: "{{ ansible_ssh_host }}"
      when: identity == 'slave' and inventory_hostname in groups[group_names.0]

    - name: Get the master log file name and location
      shell: "{{ mysql_binary_install_dir}}/mysql/bin/mysql -uroot -p'{{ mysql_new_root_password }}' -e 'show master status \\G' | grep -E 'File|Position'"
      register: "master_status"
      delegate_to: "{{ mysql_master_ip }}"
      when: identity == 'master'

    - name: backup master databases
      become: true
      mysql_db:
        login_unix_socket: "{{ mysql_socket_path }}"
        login_host: "localhost"
        login_user: "root"
        login_password: "{{ mysql_new_root_password }}"
        login_port: "{{ mysql_port }}"
        state: "dump"
        name: "all"
        target: "/root/all-databases.sql"
        dump_extra_args: "--set-gtid-purged=OFF"
      delegate_to: "{{ mysql_master_ip }}"
      when: identity == 'master'

    - name: Transfer the backup database to the slave server
      become: true
      copy:
        src: "/root/all-databases.sql"
        dest: "/tmp/all-databases.sql"
        remote_src: true
      delegate_to: "{{ item }}"
      with_items: "{{ groups[group_names.0] | map('extract', hostvars, ['ansible_ssh_host']) }}"
      #with_items: "{{ groups[group_names.0] | map('extract', hostvars, ['ansible_ssh_host']) | join(',') }}"
      when: identity == 'master'
